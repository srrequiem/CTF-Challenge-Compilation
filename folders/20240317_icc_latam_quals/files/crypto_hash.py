from math import log, ceil
import os
from Crypto.Util.number import bytes_to_long, long_to_bytes

assert("FLAG" in os.environ)
flag = os.environ["FLAG"]
assert(flag.startswith("flag{"))
assert(flag.endswith("}"))

blen = 16
nrounds = 128
sbox = [171, 87, 67, 54, 63, 28, 53, 182, 176, 135, 130, 106, 133, 137, 108, 181, 228, 236, 198, 15, 27, 168, 190, 172, 61, 43, 224, 174, 175, 208, 183, 162, 18, 5, 96, 214, 126, 109, 215, 56, 246, 250, 179, 23, 206, 48, 82, 180, 124, 90, 200, 127, 0, 58, 253, 125, 16, 46, 93, 121, 36, 100, 6, 60, 94, 11, 39, 231, 203, 161, 247, 221, 37, 3, 210, 139, 115, 201, 237, 219, 217, 77, 243, 177, 134, 80, 68, 148, 76, 152, 187, 71, 156, 14, 207, 22, 55, 122, 184, 158, 166, 50, 209, 192, 151, 9, 202, 226, 24, 117, 223, 32, 245, 249, 189, 238, 21, 149, 13, 112, 254, 145, 165, 98, 116, 150, 41, 159, 140, 65, 118, 19, 113, 154, 194, 59, 240, 233, 86, 170, 227, 89, 199, 52, 241, 167, 142, 83, 44, 230, 163, 229, 234, 64, 255, 173, 160, 196, 147, 138, 102, 20, 92, 105, 78, 153, 132, 2, 164, 186, 205, 244, 31, 69, 129, 72, 252, 17, 131, 4, 103, 26, 119, 235, 74, 128, 212, 216, 120, 188, 91, 95, 73, 123, 107, 114, 111, 85, 7, 104, 101, 40, 251, 155, 213, 75, 51, 33, 218, 49, 10, 57, 25, 195, 143, 178, 34, 191, 144, 197, 1, 12, 211, 81, 141, 88, 84, 222, 239, 157, 29, 47, 62, 136, 248, 242, 193, 220, 66, 38, 42, 97, 185, 99, 204, 8, 225, 232, 30, 110, 146, 79, 45, 70, 35, 169]
rc = [1192180554802309715, 15357825206677894448, 12364550058678393764, 13185209830599660146, 9239678266226982024, 16338756937323559038, 7485932566889899965, 15503616959597248342, 11144428785814687622, 13015966274997827985, 840486818009061149, 17822632475711108743, 9000338084902571847, 13301989424091815714, 14026823928662953167, 5748000750852658499, 6503857780247248964, 10991476491105780347, 9326797138252467128, 11225583252586063690, 15359810856388438301, 15408440582570012012, 4193132651434125272, 10638250251052472893, 12862118101947854833, 1348484112705089665, 6522005611188182502, 12711882989506746887, 7253487312367529438, 8825312390129495934, 4363616274455113953, 1387510590579321198, 89038895263493645, 3857115218094664338, 11619934682511349385, 5689291745282345237, 1532635045692755177, 1673664814195454175, 1420806296767292573, 12341436251610174933, 18299762887884357450, 9537720609777531010, 3446136590857937458, 5617531288150073688, 13951470737211556495, 11019695778625615682, 5314519497183434279, 14352508956890360571, 12663754479137963483, 12079723512482945908, 3418023335694476407, 6305260970679218586, 7505170354011637713, 14984002641112951528, 896663825811904218, 15061467523410920511, 1561338766052801171, 8868748403006289455, 8621427660329345752, 14670912587105154630, 18238916867928973910, 10558223308396465505, 16015929854947797410, 8476673582779772318, 2700326585588325856, 6071076940706400969, 12966741535784520256, 4961426115856657422, 16617581811650173593, 4565104874443924172, 1496392013849348660, 16240486341883612680, 17061642171936001168, 4098162030079555474, 12630673912845907658, 6225602515296071644, 16324453728264915276, 7169753245029466967, 7714887874277902964, 14822070421771194182, 2285253075697335161, 1938041648606486794, 14304187738479011381, 11286537762491483783, 13047352567495354496, 489105814990171450, 7710430061438285907, 16593103481363343699, 10028425547145971132, 18217129815774432325, 4786137104867442053, 13142235811521835506, 10101797645015691408, 5874816575627934939, 7764225491165157981, 15384035907289038051, 9154068939360201242, 13641820036811609797, 1445532514231924913, 975206713259740185, 6262263062951138016, 7216648770904062824, 12203910699941962812, 15059735642894169490, 4636368895554000334, 11912581699975935801, 7354609712411320439, 6215300806375794422, 12906921145388712095, 4503076542031797522, 9183656615582915004, 4986608459697513377, 15660490398589616670, 12693604837406975942, 11467484840102943352, 8806181480272777696, 12972251458495480268, 9523090198520831487, 5485010707548659856, 9450000051457418417, 4009066164056236618, 14923864664834670487, 16546566212772199058, 14451968448758369784, 8351242834871917600, 18093594061548908624, 5487102068908277918, 3185570044519325549]


def pad(msg):
    return msg + bytes([blen-(len(msg)%blen)])*(blen-(len(msg)%blen))

def xor(a, b):
    return bytes([x^y for x,y in zip(a,b)])

def rotr(val, r):
    return (val >> r) | ((val & (1<<r)-1) << (8-r))

def f(m, k, r):
    state = (bytes_to_long(m) ^ k).to_bytes(blen//2, byteorder = "big")
    state = [sbox[x] for x in state]
    state[2] ^= (0xf0 - (r%16)*0x10 + r*0x1)%256
    
    for i in range(8):
        state[i] ^= state[(i-1)%8]
    
    state2 = [(state[i] ^ 0xff) & state[(i+1)%8] for i in range(8)]
    
    for i in range(8):
        state[i] ^= state2[(i+1)%8]

    state[0] ^= rotr(state[0], 5) ^ rotr(state[0], 6)
    state[1] ^= rotr(state[1], 2) ^ rotr(state[1], 6)
    state[2] ^= rotr(state[2], 2) ^ rotr(state[2], 1)
    state[3] ^= rotr(state[3], 4) ^ rotr(state[3], 2)
    state[4] ^= rotr(state[4], 3) ^ rotr(state[4], 5)
    state[5] ^= rotr(state[5], 1) ^ rotr(state[5], 5)
    state[6] ^= rotr(state[6], 2) ^ rotr(state[6], 4)
    state[7] ^= rotr(state[7], 3) ^ rotr(state[7], 4)
    
    return bytes(state)


def ks(k):
    k1 = bytes_to_long(k) % 2**(4*blen)
    k2 = bytes_to_long(k) >> (4*blen)
    
    rk1 = [((k1 << (i%(4*blen)))%(2**(4*blen))) | k1 % (2**(i%(4*blen))) for i in range(nrounds//2)]
    rk2 = [((k2 << (i%(4*blen)))%(2**(4*blen))) | k2 % (2**(i%(4*blen))) for i in range(nrounds//2)]
    
    round_keys = sum([[rk1[i], rk2[i]] for i in range(nrounds//2)], [])
    round_keys = [round_keys[i] ^ rc[i] for i in range(len(round_keys))]
    
    return round_keys

def block(m1, m2):
    keys = ks(m1)
    l, r = m2[:blen//2], m2[blen//2:]
    
    for i in range(nrounds):
        l, r = r, xor(l, f(r, keys[i], i))
    
    return l+r

def preprocess(b, cnt):
    state = [int(x) for x in bin(bytes_to_long(b))[2:].rjust(cnt, '0')]
    
    for i in range(cnt):
        feedback = state[0] ^ state[47] ^ (1 - (state[70] & state[85])) ^ state[91]
        state = state[1:] + [feedback]
    
    b = long_to_bytes(int(''.join(str(x) for x in state), 2)).rjust(cnt//8, b"\x00")
    return b

def hash(msg):
    assert len(msg) < 256*blen
    
    m = pad(msg)
    
    assert len(m) % blen == 0
    
    s = len(m)//blen
    t = 2**ceil(log(s, 2))
    m = [m[blen*i:blen*(i+1)] for i in range(s)]

    for i in range(len(m)):
        m[i] = preprocess(m[i], 8*blen)
    
    while len(m) < 2*t-1:
        m.append(b"")
    
    for i in range(t, 2*t-1):
        l = 2*(i-t)
        r = l+1
        if m[l] == b"" and m[r] == b"":
            m[i] = b""
        elif m[r] == b"":
            m[i] = m[l]
        else:
            m[i] = xor(block(m[l], m[r]), m[r])
    
    return xor(block(m[-1], pad(bytes([s]))), pad(bytes([s])))

def chall():
    for _ in range(10):
        mymsg = os.urandom(64)
        myhash = hash(mymsg).hex()
        print((mymsg.hex(), myhash))
        yourmsg = bytes.fromhex(input())
        yourhash = hash(yourmsg).hex()
        assert myhash == yourhash and mymsg != yourmsg
    
    print(flag)

chall()
